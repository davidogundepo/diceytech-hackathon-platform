rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/user_roles/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/user_roles/$(request.auth.uid)).data.role == role;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) || hasRole('admin');
    }
    
    // User roles collection (critical for security)
    match /user_roles/{userId} {
      allow read: if isAuthenticated();
      allow create: if hasRole('admin');
      allow update: if hasRole('admin');
      allow delete: if hasRole('admin');
    }
    
    // Projects collection
    match /projects/{projectId} {
      allow read: if true; // Public read
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource.data.userId) || hasRole('admin');
      allow delete: if isOwner(resource.data.userId) || hasRole('admin');
    }
    
    // Hackathons collection
    match /hackathons/{hackathonId} {
      allow read: if true; // Public read
      allow create: if isAuthenticated();
      allow update: if isOwner(resource.data.organizerId) || hasRole('admin');
      allow delete: if isOwner(resource.data.organizerId) || hasRole('admin');
    }
    
    // Applications collection
    match /applications/{applicationId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isOwner(resource.data.employerId) ||
        hasRole('admin')
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource.data.userId) || isOwner(resource.data.employerId) || hasRole('admin');
      allow delete: if isOwner(resource.data.userId) || hasRole('admin');
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated();
      allow update: if isOwner(resource.data.userId);
      allow delete: if isOwner(resource.data.userId);
    }
    
    // Achievements collection (read-only for users)
    match /achievements/{achievementId} {
      allow read: if isAuthenticated();
      allow write: if hasRole('admin');
    }
    
    // User achievements collection
    match /user_achievements/{userAchievementId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated();
      allow update: if hasRole('admin');
      allow delete: if hasRole('admin');
    }
  }
}
